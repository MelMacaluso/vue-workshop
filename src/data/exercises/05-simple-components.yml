title: Reusable components
slug: components-intro
setup: simple
examples:

  -
    title: A simple component using Vue.component
    headCode: |
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    bodyCode: |
      <error>This is an error!</error>
      <error>And another error.</error>
      <error>Why not make it three?</error>

      <script>
        // The easiest way to define a new component is with Vue.component.
        // The first argument is the name of our custom element and the
        // second argument is an object of options.
        Vue.component('error', {

          // We define our HTML in a template option. The only new feature
          // here is a <slot></slot> element, which defines where the
          // content of the component should go.
          template: '\
            <div v-if="isOpen" class="alert alert-danger" role="alert">\
              <button v-on:click="isOpen = false" type="button" class="close" aria-label="Close">\
                <span aria-hidden="true">&times;</span>\
              </button>\
              <strong>Error!</strong>\
              <slot></slot>\
            </div>\
          ',

          // In components, data should be a function which returns
          // an object, so that each instance of the component uses a
          // unique data object. If we didn't do this, closing one
          // error would actually close all of them!
          data: function () {
            return {
              isOpen: true
            }
          }
        })

        // After we've defined all of our components, we can start our
        // application with a much simpler:
        new Vue({ el: 'body' })
      </script>
    itsWorkingWhen: three red Bootstrap alerts display on the page and each one closes when you click the X on the right side of it
    newConcepts:
      -
        title: <code>Vue.component</code>
        url: http://vuejs.org/api/#Vue-component
      -
        title: Single slots
        url: http://vuejs.org/guide/components.html#Single-Slot
      -
        title: <code>data</code> in component definitions
        url: http://vuejs.org/api/#data
    newPrereqJavaScript:
      -
        title: Multi-line strings
        url: https://davidwalsh.name/multiline-javascript-strings

  -
    title: Passing props for more dynamic components
    headCode: |
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    bodyCode: |
      <alert kind="info">
        This is just some information.
      </alert>
      <alert kind="success" dismissible="false">
        Yay! Something went right! But you can't dismiss this alert. :-p
      </alert>
      <alert kind="warning">
         Uh oh... this is a warning. Something kind of weird may have happened.
      </alert>
      <alert kind="danger" dismissible="false">
        Something very bad happened. And you're stuck looking me, because I'm not dismissible either.
      </alert>

      <script>
        Vue.component('alert', {
          template: '\
            <div v-if="isOpen" v-bind:class="bootstrapClasses" role="alert">\
              <button v-if="dismissible" v-on:click="isOpen = false" type="button" class="close" aria-label="Close">\
                <span aria-hidden="true">&times;</span>\
              </button>\
              <slot></slot>\
            </div>\
          ',

          // Props are custom attributes that our component can accept.
          // If you're feeling lazy, props can be defined in an array:
          //
          // props: [ 'dismissible', 'kind' ]
          //
          // In the object syntax used below however, we're allowed to
          // define types for each of our attributes, whether they're
          // required, defaults if they're not required, and even a
          // special validator function to more narrowly define what
          // is and is not an acceptable value. When props fail a
          // validation, the component aborts and emits an error in the
          // JavaScript console.
          props: {
            dismissible: {
              type: Boolean,
              default: true
            },
            kind: {
              type: String,
              required: true,
              validator: function (value) {
                return [
                  'success', 'info', 'warning', 'danger'
                ].some(function (acceptableValue) {
                  return acceptableValue === value
                })
              }
            }
          },

          data: function () {
            return {
              isOpen: true
            }
          },

          computed: {
            bootstrapClasses: function () {
              return 'alert alert-' + this.kind
            }
          }
        })

        new Vue({ el: 'body' })
      </script>
    itsWorkingWhen: you see a variety of Bootstrap alerts displayed on the page, some of which are dismissible and some of which aren't
    newConcepts:
      -
        title: <code>props</code>
        url: http://vuejs.org/guide/components.html#Props
    newPrereqJavaScript:
      -
        title: JavaScript data structures
        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
      -
        title: <code>Array.prototype.some</code>
        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some#Examples

  -
    title: Configurable counter that communicates with parent
    bodyCode: |
      <p v-if="counterIsDone">
        It's been 10 seconds.
      </p>
      <p v-else>
        It will have been 10 seconds since I loaded this page in
        <!--
        When passing numbers to a prop, it's important to use
        v-bind to pass a JavaScript value directly. Otherwise, the
        number will be passed as a string and fail validation.
        -->
        <super-counter
          v-bind:initial-value="10"
          v-bind:increment-by="-1"
          v-bind:stop-at="0"
          v-bind:when-done="setCounterToDone"
        ></super-counter>
        seconds.
      </p>

      <script>
        Vue.component('super-counter', {
          template: '<span>{{ number }}</span>',

          // Props can be not only of type Boolean or String,
          // but also Number, Function, Object, or Array.
          props: {
            initialValue: {
              type: Number,
              default: 0
            },
            incrementBy: {
              type: Number,
              default: 1
            },
            interval: {
              type: Number,
              default: 1000
            },
            stopAt: {
              type: Number
            },
            whenDone: {
              type: Function
            }
          },

          data: function () {
            return {
              number: this.initialValue
            }
          },

          created: function () {
            this.counter = setInterval(function () {
              this.number += this.incrementBy
              if (this.stopAt === this.number) {
                clearInterval(this.counter)
                this.whenDone && this.whenDone()
              }
            }.bind(this), this.interval)
          },

          beforeDestroy: function () {
            clearInterval(this.counter)
          }
        })

        new Vue({
          el: 'body',

          data: {
            counterIsDone: false
          },

          methods: {
            setCounterToDone: function () {
              this.counterIsDone = true
            }
          }
        })
      </script>
    itsWorkingWhen: the page counts down from 10 seconds, then tells you that it's been 10 seconds
    newConcepts:
      -
        title: <code>v-bind</code> to pass numbers to props
        url: http://vuejs.org/guide/components.html#Literal-vs-Dynamic
    newPrereqJavaScript:
      -
        title: Timing events
        url: http://www.w3schools.com/js/js_timing.asp

  -
    title: Using components within other components
    bodyCode: |
      <timer></timer>
      <timer></timer>
      <timer></timer>

      <!--
      For templates that are really long, multiline strings can be
      annoying, because they require backslashes at the end of every
      line and lack any syntax highlighting.

      In simple setups like this, one solution is to pull the template
      out into a script of type "text/x-template", then reference the
      template by an id in our component declaration.
      -->
      <script type="text/x-template" id="timer-template">
        <div>
          <div v-if="!timerStarted">
            <!--
            In HTML, the value of inputs of type "number" are still
            strings, rather than actual numbers like you might expect.
            To help compensate for this, Vue provides the "number"
            attribute parameter for v-model, which automatically casts
            the value of the input to a number for you.

            In Vue 2.0, this will be done through a modifier instead.
            That means instead of:

            <input v-model="myNumber" number>

            you will write:

            <input v-model.number="myNumber">
            -->
            <input
              v-if="!timerStarted"
              v-model="countDownFromSeconds"
              type="number"
              number
            >
            <button v-on:click="start">Start</button>
          </div>
          <div v-else>
            <p v-if="!timerFinished">
              <super-counter
                v-bind:initial-value="countDownFromSeconds"
                v-bind:increment-by="-1"
                v-bind:stop-at="0"
                v-bind:when-done="playAlert"
              ></super-counter>
              seconds
            </p>
            <p v-else>Alert!</p>
            <button v-on:click="stop">Stop</button>
            <!--
            v-el allows us to assign a name to a unique element,
            so that we can access it in our code with
            this.$els.nameOfMyElement. You can think of this as
            like giving an element an id, but scoped to the
            component instance.

            In Vue 2.0, v-el with be merged with v-ref, so that
            for both HTML elements and Vue components, you will
            assign a name with the v-ref attribute and then
            access the element or component in your code through
            this.$refs.
            -->
            <audio v-el:alert src="http://soundbible.com/mp3/Alarm%20Alert%20Effect-SoundBible.com-462520910.mp3" loop></audio>
          </div>
        </div>
      </script>

      <script>
        Vue.component('timer', {
          // Referencing our external template here, rather than
          // working with it in a multiline string.
          template: '#timer-template',

          data: function () {
            return {
              countDownFromSeconds: 5,
              timerStarted: false,
              timerFinished: false
            }
          },

          methods: {
            playAlert: function () {
              this.$els.alert.play()
              this.timerFinished = true
            },
            start: function () {
              this.timerStarted = true
              this.timerFinished = false
            },
            stop: function () {
              this.timerStarted = false
            }
          }
        })

        Vue.component('super-counter', {
          template: '<span>{{ number }}</span>',

          props: {
            initialValue: {
              type: Number,
              default: 0
            },
            incrementBy: {
              type: Number,
              default: 1
            },
            interval: {
              type: Number,
              default: 1000
            },
            stopAt: {
              type: Number
            },
            whenDone: {
              type: Function
            }
          },

          data: function () {
            return {
              number: this.initialValue
            }
          },

          created: function () {
            this.counter = setInterval(function () {
              this.number += this.incrementBy
              if (this.stopAt === this.number) {
                clearInterval(this.counter)
                this.whenDone && this.whenDone()
              }
            }.bind(this), this.interval)
          },

          beforeDestroy: function () {
            clearInterval(this.counter)
          }
        })

        new Vue({ el: 'body' })
      </script>
    itsWorkingWhen: each timer starts when clicking a "Start" button and counts down from whatever number you chose, then plays an alert sound until you press a "Stop" button
    newConcepts:
      -
        title: <code>number</code> attribute parameter for <code>v-model</code>
        url: http://vuejs.org/guide/forms.html#number
      -
        title: <code>v-el</code>
        url: http://vuejs.org/api/#v-el
    newPrereqJavaScript:
      -
        title: HTML5 audio API
        url: http://www.w3schools.com/html/html5_audio.asp

modification: |
  <p>Enhance the <code>timer</code> component in example 5.4, so that:</p>
  <ul>
    <li>If someone enters a negative number, the timer refuses to start and instead displays an error below the input. When the timer is finally started successfully, the error disappears.</li>
    <li>Instead of using normal input elements, the <code>timer</code> component uses a <code>bootstrap-input</code> component that you define, which applies the necessary markup for a <a href="http://getbootstrap.com/css/#inputs" target="_blank">Bootstrap input</a>.
    <li>The Bootstrap CSS CDN link from examples 5.1 and 5.2 is added to the head, so that the input is styled correctly.</li>
  </ul>

buildFromScratch: |
  <h4>Refactor two previous Vue apps into reusable components</h4>
  <p>Pick two of the previous apps you've built (or seen in an example) and reorganize them into a single app, by refactoring them both into components with <code>Vue.component</code>.</p>
