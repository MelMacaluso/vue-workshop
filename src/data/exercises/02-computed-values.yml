title: Computed values
setup: simple
examples:

  -
    title: Derived/computed values in a calculator
    bodyCode: |
      <input v-model="firstNumber" type="number">
      <!--
      v-model works on other form inputs types as well,
      such as the select element below!
      -->
      <select v-model="operator">
        <option value="+">+</option>
        <option value="-">-</option>
        <option value="*">*</option>
        <option value="/">/</option>
      </select>
      <input v-model="secondNumber" type="number" >
      =
      {{ result }}

      <script>
        new Vue({
          el: 'body',
          data: {
            firstNumber: 0,
            secondNumber: 0,
            operator: '+'
          },
          computed: {
            // Whenever firstNumber, operator, or secondNumber changes,
            // result will automatically update using the provided function.
            // Otherwise, it will remain cached.
            result: function () {
              return eval(this.firstNumber + this.operator + this.secondNumber)
            }
          }
        })
      </script>
    itsWorkingWhen: updating the form inputs results in correct calculations
    newConcepts:
      -
        title: Computed values
        url: http://vuejs.org/guide/computed.html

modification: |
  <p><a href="http://www.w3schools.com/js/js_errors.asp" target="_blank">Using a try/catch</a>, update the computed value in example 2.1 so that if eval throws an error from an invalid value, such as a blank input, the result is set to a useful error message, rather than just being blank.</p>
buildFromScratch: |
  <h4>Option 1: Build a funny tip calculator</h4>
  <p>Build about 3 form inputs for a customer in a restaurant, asking them questions such as whether they brought a baby with them, if they tried to hit on any of the wait staff, how many substitutions they asked for, etc. Using this information, as well as the total of their bill, calculate a recommended tip in a computed value and display it on the page.</p>

  <h4>Option 2: Build a CSS color previewer</h4>
  <p>Have an input for a user to enter a valid CSS color, then in a color swatch below the input, show the user what the color they entered actually looks like. <strong>Note</strong>: You'll find <a href="http://vuejs.org/guide/class-and-style.html#Binding-Inline-Styles" target="_blank">inline style binding</a> very useful, so check out those docs!</p>
