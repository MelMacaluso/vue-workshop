title: Fetching data from APIs, conditional rendering, and lifecycle hooks
setup: simple
examples:

  -
    title: Fetching Star Wars planets from an API
    headCode: |
      <script src="https://cdn.jsdelivr.net/vue.resource/0.7.3/vue-resource.min.js"></script>
    bodyCode: |
      <h1>Planets in Star Wars</h1>
      <!--
      v-if ensures that an element only renders when a condition is true
      -->
      <p v-if="planets.length === 0">
        Loading planets...
      </p>
      <div v-for="planet in planets">
        <h2>{{ planet.name }}</h2>
        <ul>
          <li>Terrain: {{ planet.terrain }}</li>
          <li>Population: {{ planet.population }}</li>
        </ul>
      </div>

      <script>
        // Registers the VueResource plugin with Vue
        Vue.use(VueResource)

        new Vue({
          el: 'body',

          data: {
            planets: []
          },

          // created is a "lifecycle hook" - it runs once the app or
          // component has been created, but before it finishes rendering.
          // In the new concepts section, we'll link to a full list of
          // lifecycle methods.
          created: function () {
            // $http is made available to all app or component instances,
            // courtesy of vue-resource.
            this.$http.get('http://swapi.co/api/planets')
              .then(function (response) {
                this.planets = response.data.results
              })
          }
        })
      </script>
    itsWorkingWhen: planets display shortly after the page loads
    newConcepts:
      -
        title: vue-resource
        url: https://github.com/vuejs/vue-resource/blob/master/docs/http.md
      -
        title: Conditional rendering
        url: http://vuejs.org/guide/conditional.html
      -
        title: Lifecycle hooks
        url: http://vuejs.org/api/#Options-Lifecycle-Hooks
    newPrereqJavaScript:
      -
        title: Promises
        url: http://www.html5rocks.com/en/tutorials/es6/promises/

  -
    title: Searching for upcoming events with the Lansing.Codes API
    headCode: |
      <script src="https://cdn.jsdelivr.net/vue.resource/0.7.3/vue-resource.min.js"></script>
      <script src="https://cdn.jsdelivr.net/lodash/4.13.1/lodash.min.js"></script>
    bodyCode: |
      <h1>
        Next
        <input v-model="topic" placeholder="event topic">
        event
      </h1>
      <p>
        <span v-if="fetchStatus === 'done'">
          <span v-if="nextEvent">
            The next {{ topic }} event is
            <a v-bind:href="nextEvent.links.self" target="_blank">
              {{ nextEvent.attributes.name }}
            </a>
          </span>
          <span v-else>
            No meetups found for that topic.
          </span>
        </span>
        <span v-else>{{ fetchStatus }}</span>
      </p>

      <script>
        Vue.use(VueResource)

        new Vue({
          el: 'body',

          data: {
            topic: '',
            fetchStatus: 'waiting for input...',
            nextEvent: null
          },

          // When making Ajax requests based on user input, it's often
          // useful to "watch" the data bound to that input and trigger
          // a function when it changes.
          watch: {
            topic: function () {
              this.fetchStatus = 'typing...'
              this.fetchPlanets()
            }
          },

          methods: {
            // _.debounce is a function provided by lodash to limit how
            // often a particularly expensive operation can be run.
            // In this case, we want to limit how often we hit the
            // Lansing.Codes API, waiting until the user has completely
            // finished typing before making the actual Ajax request.
            // To learn more about the _.debounce function (and its
            // cousin _.throttle), visit:
            // https://lodash.com/docs#debounce
            fetchPlanets: _.debounce(
              function () {
                if (this.topic.trim().length === 0) {
                  this.fetchStatus = 'waiting for input...'
                } else {
                  this.fetchStatus = 'loading...'
                }

                this.$http.get(
                  'http://api.lansing.codes/v1/events/upcoming/search/' + this.topic
                ).then(function (response) {
                  this.nextEvent = response.data.data[0]
                  this.fetchStatus = 'done'
                })
              },
              // This is the number of milliseconds we wait for the user
              // to stop typing. There are 1000 milliseconds in 1 second.
              500
            )
          }
        })
      </script>
    itsWorkingWhen: typing something like "javascript" into the input results in an event link being displayed
    newConcepts:
      -
        title: <code>watch</code>
        url: http://vuejs.org/api/#watch

modification: |
  <p>In example 4.2, use <code>{{ nextEvent | json }}</code> (or just <code>nextEvent</code> for 2.0) in your HTML to inspect the contents of <code>nextEvent</code> and display more information about the event on the page, such as which meetup it's from and the relative time until the event starts.</p>

buildFromScratch: |
  <h4>Build an app that answers yes/no questions</h4>
  <p>We won't just answer yes or no however. We'll display funny gifs using <a href="http://yesno.wtf/api" target="_blank">yesno.wtf/api</a>. Display the gif on the page once you've pulled it in. Remember that <code>v-bind</code> will be useful for binding data in your app to an image's <code>src</code> attribute.</p>
