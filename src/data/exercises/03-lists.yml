title: Lists
slug: lists
setup: simple
examples:

  -
    title: Very simple todo app
    bodyCode: |
      <h1>Todo List</h1>

      <input
        v-model="newTodoText"
        v-on:keyup.enter="addTodo"
        placeholder="Add a new todo"
      >
      <ul>
        <!--
        v-for allows you to repeat an element for each item
        in an array, using the value of that item in the contents
        of the element.

        NOTE:
          In Vue 2.0, the order of arguments will be swapped to
          (todo, index) in order to be more consistent with
          JavaScript's forEach and map methods.
        -->
        <li v-for="(index, todo) in todos">
          <span>{{ todo.text }}</span>
          <button @click="removeTodo(index)">X</button>
        </li>
      </ul>

      <script>
        new Vue({
          el: 'body',

          data: {
            newTodoText: '',
            todos: []
          },

          methods: {
            addTodo: function () {
              if (this.newTodoText) {
                this.todos.push({ text: this.newTodoText })
                this.newTodoText = ''
              }
            },
            removeTodo: function (index) {
              this.todos.splice(index, 1)
            }
          }
        })
      </script>
    itsWorkingWhen: you're able to add and remove todos in the browser
    newConcepts:
      -
        title: List rendering
        url: http://vuejs.org/guide/list.html
      -
        title: Array change detection
        url: http://vuejs.org/guide/list.html#Array-Change-Detection
    newPrereqJavaScript:
      -
        title: Arrays
        url: http://www.w3schools.com/js/js_arrays.asp


  # COMMENTING THIS OUT FOR NOW, AS LEO CONVINCED ME THAT
  # THIS BELONGED IN A GENERAL SHOWCASE RATHER THAN A
  # DEMO OF HOW TO USE LISTS IN VUE

  # -
  #   title: Drag & drop leaderboard
  #   headCode: |
  #     <style>
  #       [draggable] {
  #         cursor: move;
  #         cursor: -webkit-grab;
  #         cursor: -moz-grab;
  #         cursor: grab;
  #         -khtml-user-drag: element;
  #         -webkit-user-drag: element;
  #         -moz-user-select:none;
  #         -khtml-user-select: none;
  #         -webkit-user-select: none;
  #       }
  #     </style>
  #   bodyCode: |
  #     <h1>Leaderboard</h1>

  #     <p>Drag and drop people in the list to reorder them.</p>

  #     <ol>
  #       <li
  #         v-for="(index, person) in leaderboard"
  #         v-bind:data-index="index"
  #         v-on:dragstart="dragStart"
  #         v-on:dragenter="dragEnter"
  #         draggable="true"
  #       >
  #         {{ person }}
  #       </li>
  #     </ol>

  #     <script>
  #       new Vue({
  #         el: 'body',

  #         data: {
  #           leaderboard: [
  #             'Ramon', 'Alexis', 'Firmo', 'Elizabeth', 'Joona'
  #           ],
  #           movingPersonIndex: null
  #         },

  #         methods: {
  #           dragStart: function (event) {
  #             # Set the index of the dragged person
  #             this.movingPersonIndex = event.target.dataset.index

  #             # Hacky, but needed for drag & drop to work in some browsers
  #             event.dataTransfer.setData('foo', 'bar')
  #           },
  #           dragEnter: function (event) {
  #             # Get the index of the item we dragged over
  #             var enteredIndex = event.target.dataset.index
  #             # Get the person by their current index
  #             var movingPerson = this.leaderboard[this.movingPersonIndex]

  #             # Move dragged person to their new location
  #             this.leaderboard.splice(this.movingPersonIndex, 1)
  #             this.leaderboard.splice(enteredIndex, 0, movingPerson)

  #             # Update the index of the person being dragged
  #             this.movingPersonIndex = enteredIndex
  #           }
  #         }
  #       })
  #     </script>
  #   itsWorkingWhen: you can drag and drop people in the list to reorder them
  #   newPrereqJavaScript:
  #     -
  #       title: HTML drag & drop API
  #       url: https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API

modification: |
  <p>Building on example 3.1, add a new property to new todos called <code>isComplete</code>, which should start as <code>false</code>. Then add a checkbox input next to each item, which is bound to that item's <code>isComplete</code> property with <code>v-model</code>.</p>
  <p>Finally, add two buttons below the list of todos. The first will be called "Clear all" and it will reset todos to an empty array when clicked. The second button will be called "Clear completed" and it will set <code>todos</code> to a new array of todos, with all the completed ones <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Examples" target="_blank">filtered</a> out.</p>

buildFromScratch: |
  <h4>Build a raffle app</h4>
  <p>Add an input for people to be adding to the list of entrants in the raffle. Once added, these entrants should be displayed in a list and the input should be cleared.</p>
  <p>There should also be a button called "Pick winner" which will fire an alert with the name of a <a href="http://stackoverflow.com/questions/4550505/getting-random-value-from-an-array" target="_blank">random</a> entrant. This entrant should then be removed from the list, so that they can't win again on the next drawing.</p>
