title: Reusable components
slug: components-intro
setup: simple
examples:

  -
    title: Reusable counter
    bodyCode: |
      <p v-if="counterIsDone">
        It's been 5 seconds.
      </p>
      <p v-else>
        It will have been 5 seconds since I loaded this page in
        <counter
          v-bind:initial-value="5"
          v-bind:increment-by="-1"
          v-bind:stop-at="0"
          v-bind:done="counterCallback"
        ></counter>
        seconds.
      </p>

      <script>
        Vue.component('counter', {
          template: '<span>{{ number }}</span>',

          props: {
            initialValue: {
              type: Number,
              default: 0
            },
            incrementBy: {
              type: Number,
              default: 1
            },
            interval: {
              type: Number,
              default: 1000
            },
            stopAt: {
              type: Number
            },
            done: {
              type: Function
            }
          },

          data: function () {
            return {
              number: this.initialValue
            }
          },

          created: function () {
            this.counter = setInterval(function () {
              this.number += this.incrementBy
              if (this.stopAt === this.number) {
                clearInterval(this.counter)
                this.done && this.done()
              }
            }.bind(this), this.interval)
          },

          beforeDestroy: function () {
            clearInterval(this.counter)
          }
        })

        new Vue({
          el: 'body',

          data: {
            counterIsDone: false
          },

          methods: {
            counterCallback: function () {
              this.counterIsDone = true
            }
          }
        })
      </script>
    itsWorkingWhen: planets display shortly after the page loads
    newConcepts:
      -
        title: vue-resource
        url: https://github.com/vuejs/vue-resource/blob/master/docs/http.md
      -
        title: Conditional rendering
        url: http://vuejs.org/guide/conditional.html
      -
        title: Lifecycle hooks
        url: http://vuejs.org/api/#Options-Lifecycle-Hooks
    newPrereqJavaScript:
      -
        title: Promises
        url: http://www.html5rocks.com/en/tutorials/es6/promises/

modification: |
  <p>In example 4.2, use <code>{{ nextEvent | json }}</code> in your HTML to inspect the contents of <code>nextEvent</code> and display more information about the event on the page, such as which meetup it's from and the relative time until the event starts.</p>

buildFromScratch: |
  <h4>Build an app that answers yes/no questions</h4>
  <p>We won't just answer yes or no however. We'll display funny gifs using <a href="http://yesno.wtf/api" target="_blank">yesno.wtf/api</a>. Display the gif on the page once you've pulled it in. Remember that <code>v-bind</code> will be useful for binding data in your app to an image's <code>src</code> attribute.</p>
